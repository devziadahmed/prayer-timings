import { currentDate, currentTimeInMs } from "./constants";
import { i18n, t } from "i18next";

// Generated by chatGBT
export function convertTo12HourFormat(time24: string): string | void {
  if (!time24) return;
  // Split the time string into hours and minutes
  const [hours, minutes] = time24.split(":").map(Number);

  // Determine the meridiem (AM or PM)
  const meridiem = hours >= 12 ? "PM" : "AM";

  // Convert hours to 12-hour format
  const hours12 = hours % 12 || 12; // 0 should be converted to 12 for 12 AM

  // Format the time in 12-hour format
  const time12 = `${hours12}:${String(minutes).padStart(2, "0")} ${meridiem}`;

  return time12;
}

// cridit => https://dev.to/jorik/country-code-to-flag-emoji-a21
export function getFlagEmoji(countryCode: string): string | void {
  if (!countryCode) return;

  const codePoints = countryCode
    .toUpperCase()
    .split("")
    .map((char) => 127397 + char.charCodeAt());
  return String.fromCodePoint(...codePoints);
}

export function msToTime(duration: number) {
  const seconds = Math.floor((duration / 1000) % 60);
  const minutes = Math.floor((duration / (1000 * 60)) % 60);
  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

  const formattedTime = [
    hours.toString().padStart(2, "0"),
    minutes.toString().padStart(2, "0"),
    seconds.toString().padStart(2, "0"),
  ].join(":");

  return formattedTime;
}

export function getPrayerStatus(timings) {
  let currentPrayer = { name: "" };
  let nextPrayer = { name: "", time: 0 };
  const fajrLimit = parseInt(timings.Sunrise.slice(0, 3));

  for (const prayer in timings) {
    const prayerTimeInMs = new Date(`${currentDate} ${timings[prayer]}`).getTime();

    if (prayerTimeInMs > currentTimeInMs) {
      nextPrayer = { name: prayer, time: prayerTimeInMs };
      break;
    }

    if ((prayer === "Fajr" && new Date().getHours() >= fajrLimit) || prayer === "Sunrise") {
      continue;
    }

    currentPrayer = { name: prayer };
  }

  return { currentPrayer, nextPrayer };
}

export function formatDateTime(date) {
  const year = date.getFullYear();
  const month = t(`header.date.months.${date.getMonth()}`);
  const day = t(`header.date.days.${date.getDay()}`);
  const hour = date.getHours();
  const minute = date.getMinutes();

  const formattedDateTime = `${month} ${day} ${year} | ${convertTo12HourFormat(
    `${hour}:${minute}`
  )}`;

  return formattedDateTime;
}
